{"mappings":"ACEA,SAAS,gBAAgB,CAAC,QAAS,SAAC,CAApC,EAEE,IAAM,EAAS,SAAS,aAAa,CAAC,WAChC,EAAO,SAAS,aAAa,CAAC,SAG9B,EAAe,EAAO,YAAY,CAClC,EAAc,EAAO,WAAW,CAGhC,EAAW,EAAK,qBAAqB,GACrC,EAAc,WAClB,OAAO,gBAAgB,CAAC,GAAM,gBAAgB,CAAC,iBAM3C,EAAI,EAAE,KAAK,CAAG,EAAS,IAAI,CAC3B,EAAI,EAAE,KAAK,CAAG,EAAS,GAAG,CAGhC,GAAI,GAAK,GAAK,GAAK,GAAK,GAAK,EAAS,KAAK,EAAI,GAAK,EAAS,MAAM,CAAE,CAEnE,IAAI,EAAU,EAAI,EAAc,EAAI,EAChC,EAAU,EAAI,EAAe,EAAI,EAI/B,EAAqB,EAAS,KAAK,CAAG,EAAI,EAAc,EAExD,EACJ,EAAS,MAAM,CAAG,EAAI,EAAc,EAGlC,EAPsB,GAQxB,CAAA,EARwB,CAO1B,EAII,GAAW,GACb,CAAA,EAAU,CADZ,EAII,EAbqB,GAcvB,CAAA,EAduB,CAazB,EAII,EAAU,GACZ,CAAA,EAAU,CADZ,EAKA,EAAK,KAAK,CAAC,QAAQ,CAAG,WACtB,EAAO,KAAK,CAAC,QAAQ,CAAG,WACxB,EAAO,KAAK,CAAC,IAAI,CAAG,GAAW,MAAA,CAAR,EAAQ,MAC/B,EAAO,KAAK,CAAC,GAAG,CAAG,GAAW,MAAA,CAAR,EAAQ,KAChC,CACF","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\ndocument.addEventListener(\"click\", function(e) {\n    // Getting wall and spider elements\n    var spider = document.querySelector(\".spider\");\n    var wall = document.querySelector(\".wall\");\n    // Getting spider size\n    var spiderHeight = spider.clientHeight;\n    var spiderWidth = spider.clientWidth;\n    // Getting wall size\n    var wallRect = wall.getBoundingClientRect();\n    var borderWidth = parseFloat(window.getComputedStyle(wall).getPropertyValue(\"border-width\"));\n    // Getting coordinates of the click relative to the wall\n    // const x = e.clientX - wallRect.left;\n    // const y = e.clientY - wallRect.top;\n    var x = e.pageX - wallRect.left;\n    var y = e.pageY - wallRect.top;\n    // Checking if the click is inside the wall boundaries considering the spider\n    if (x >= 0 && y >= 0 && x <= wallRect.width && y <= wallRect.height) {\n        // Calculating new coordinates for spider\n        var spiderX = x - spiderWidth / 2 - borderWidth;\n        var spiderY = y - spiderHeight / 2 - borderWidth;\n        // get possible spider placement rect\n        var availableAreaLeft = 0;\n        var availableAreaRight = wallRect.width - 2 * borderWidth - spiderWidth;\n        var availableAreaTop = 0;\n        var availableAreaBottom = wallRect.height - 2 * borderWidth - spiderHeight;\n        // adjusting spider coordinates to wall rect\n        if (spiderX < availableAreaLeft) spiderX = availableAreaLeft;\n        if (spiderX >= availableAreaRight) spiderX = availableAreaRight;\n        if (spiderY < availableAreaTop) spiderY = availableAreaTop;\n        if (spiderY > availableAreaBottom) spiderY = availableAreaBottom;\n        // Setting the spider position using absolute positioning\n        wall.style.position = \"relative\";\n        spider.style.position = \"absolute\";\n        spider.style.left = \"\".concat(spiderX, \"px\");\n        spider.style.top = \"\".concat(spiderY, \"px\");\n    }\n});\n\n//# sourceMappingURL=index.9a8263eb.js.map\n","'use strict';\n\ndocument.addEventListener('click', (e) => {\n  // Getting wall and spider elements\n  const spider = document.querySelector('.spider');\n  const wall = document.querySelector('.wall');\n\n  // Getting spider size\n  const spiderHeight = spider.clientHeight;\n  const spiderWidth = spider.clientWidth;\n\n  // Getting wall size\n  const wallRect = wall.getBoundingClientRect();\n  const borderWidth = parseFloat(\n    window.getComputedStyle(wall).getPropertyValue('border-width'),\n  );\n  // Getting coordinates of the click relative to the wall\n  // const x = e.clientX - wallRect.left;\n  // const y = e.clientY - wallRect.top;\n\n  const x = e.pageX - wallRect.left;\n  const y = e.pageY - wallRect.top;\n\n  // Checking if the click is inside the wall boundaries considering the spider\n  if (x >= 0 && y >= 0 && x <= wallRect.width && y <= wallRect.height) {\n    // Calculating new coordinates for spider\n    let spiderX = x - spiderWidth / 2 - borderWidth;\n    let spiderY = y - spiderHeight / 2 - borderWidth;\n\n    // get possible spider placement rect\n    const availableAreaLeft = 0;\n    const availableAreaRight = wallRect.width - 2 * borderWidth - spiderWidth;\n    const availableAreaTop = 0;\n    const availableAreaBottom =\n      wallRect.height - 2 * borderWidth - spiderHeight;\n\n    // adjusting spider coordinates to wall rect\n    if (spiderX < availableAreaLeft) {\n      spiderX = availableAreaLeft;\n    }\n\n    if (spiderX >= availableAreaRight) {\n      spiderX = availableAreaRight;\n    }\n\n    if (spiderY < availableAreaTop) {\n      spiderY = availableAreaTop;\n    }\n\n    if (spiderY > availableAreaBottom) {\n      spiderY = availableAreaBottom;\n    }\n\n    // Setting the spider position using absolute positioning\n    wall.style.position = 'relative';\n    spider.style.position = 'absolute';\n    spider.style.left = `${spiderX}px`;\n    spider.style.top = `${spiderY}px`;\n  }\n});\n"],"names":["document","addEventListener","e","spider","querySelector","wall","spiderHeight","clientHeight","spiderWidth","clientWidth","wallRect","getBoundingClientRect","borderWidth","parseFloat","window","getComputedStyle","getPropertyValue","x","pageX","left","y","pageY","top","width","height","spiderX","spiderY","availableAreaRight","availableAreaBottom","style","position","concat"],"version":3,"file":"index.9a8263eb.js.map"}