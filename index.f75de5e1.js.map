{"mappings":"AAAA;AAEA,SAAS,gBAAgB,CAAC,SAAS,CAAC;IAClC,mCAAmC;IACnC,MAAM,SAAS,SAAS,aAAa,CAAC;IACtC,MAAM,OAAO,SAAS,aAAa,CAAC;IAEpC,sBAAsB;IACtB,MAAM,eAAe,OAAO,YAAY;IACxC,MAAM,cAAc,OAAO,WAAW;IAEtC,oBAAoB;IACpB,MAAM,WAAW,KAAK,qBAAqB;IAC3C,MAAM,cAAc,WAClB,OAAO,gBAAgB,CAAC,MAAM,gBAAgB,CAAC;IAEjD,wDAAwD;IACxD,uCAAuC;IACvC,sCAAsC;IAEtC,MAAM,IAAI,EAAE,KAAK,GAAG,SAAS,IAAI;IACjC,MAAM,IAAI,EAAE,KAAK,GAAG,SAAS,GAAG;IAEhC,6EAA6E;IAC7E,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,SAAS,KAAK,IAAI,KAAK,SAAS,MAAM,EAAE;QACnE,yCAAyC;QACzC,IAAI,UAAU,IAAI,cAAc,IAAI;QACpC,IAAI,UAAU,IAAI,eAAe,IAAI;QAErC,qCAAqC;QACrC,MAAM,oBAAoB;QAC1B,MAAM,qBAAqB,SAAS,KAAK,GAAG,IAAI,cAAc;QAC9D,MAAM,mBAAmB;QACzB,MAAM,sBAAsB,SAAS,MAAM,GAAG,IAAI,cAAc;QAEhE,4CAA4C;QAC5C,IAAI,UAAU,mBACZ,UAAU;QAGZ,IAAI,WAAW,oBACb,UAAU;QAGZ,IAAI,UAAU,kBACZ,UAAU;QAGZ,IAAI,UAAU,qBACZ,UAAU;QAGZ,yDAAyD;QACzD,KAAK,KAAK,CAAC,QAAQ,GAAG;QACtB,OAAO,KAAK,CAAC,QAAQ,GAAG;QACxB,OAAO,KAAK,CAAC,IAAI,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC;QAClC,OAAO,KAAK,CAAC,GAAG,GAAG,CAAC,EAAE,QAAQ,EAAE,CAAC;IACnC;AACF","sources":["src/scripts/main.js"],"sourcesContent":["'use strict';\n\ndocument.addEventListener('click', (e) => {\n  // Getting wall and spider elements\n  const spider = document.querySelector('.spider');\n  const wall = document.querySelector('.wall');\n\n  // Getting spider size\n  const spiderHeight = spider.clientHeight;\n  const spiderWidth = spider.clientWidth;\n\n  // Getting wall size\n  const wallRect = wall.getBoundingClientRect();\n  const borderWidth = parseFloat(\n    window.getComputedStyle(wall).getPropertyValue('border-width'),\n  );\n  // Getting coordinates of the click relative to the wall\n  // const x = e.clientX - wallRect.left;\n  // const y = e.clientY - wallRect.top;\n\n  const x = e.pageX - wallRect.left;\n  const y = e.pageY - wallRect.top;\n\n  // Checking if the click is inside the wall boundaries considering the spider\n  if (x >= 0 && y >= 0 && x <= wallRect.width && y <= wallRect.height) {\n    // Calculating new coordinates for spider\n    let spiderX = x - spiderWidth / 2 - borderWidth;\n    let spiderY = y - spiderHeight / 2 - borderWidth;\n\n    // get possible spider placement rect\n    const availableAreaLeft = 0;\n    const availableAreaRight = wallRect.width - 2 * borderWidth - spiderWidth;\n    const availableAreaTop = 0;\n    const availableAreaBottom = wallRect.height - 2 * borderWidth - spiderHeight;\n\n    // adjusting spider coordinates to wall rect\n    if (spiderX < availableAreaLeft) {\n      spiderX = availableAreaLeft;\n    }\n\n    if (spiderX >= availableAreaRight) {\n      spiderX = availableAreaRight;\n    }\n\n    if (spiderY < availableAreaTop) {\n      spiderY = availableAreaTop;\n    }\n\n    if (spiderY > availableAreaBottom) {\n      spiderY = availableAreaBottom;\n    }\n\n    // Setting the spider position using absolute positioning\n    wall.style.position = 'relative';\n    spider.style.position = 'absolute';\n    spider.style.left = `${spiderX}px`;\n    spider.style.top = `${spiderY}px`;\n  }\n});\n"],"names":[],"version":3,"file":"index.f75de5e1.js.map","sourceRoot":"/__parcel_source_root/"}